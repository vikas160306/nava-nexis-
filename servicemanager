import React, { useState, useEffect } from "react";
import { Service } from "@/entities/Service";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Plus, Edit, Trash, BookOpen, Palette } from "lucide-react";

const iconMap = {
  BookOpen,
  Palette,
  Edit3: Edit, 
  FileText: Edit, 
  Globe: Edit, 
  Camera: Edit, 
  Layers: Edit
};

const ServiceForm = ({ service, onSave, onDone }) => {
  const [currentService, setCurrentService] = useState(
    service || { name: "", category: "publishing", description: "", features: [], icon: "BookOpen" }
  );

  const handleSave = async () => {
    await onSave(currentService);
    onDone();
  };

  const handleFeatureChange = (index, value) => {
    const newFeatures = [...currentService.features];
    newFeatures[index] = value;
    setCurrentService({ ...currentService, features: newFeatures });
  };

  const addFeature = () => {
    setCurrentService({ ...currentService, features: [...currentService.features, ""] });
  };

  const removeFeature = (index) => {
    const newFeatures = currentService.features.filter((_, i) => i !== index);
    setCurrentService({ ...currentService, features: newFeatures });
  };

  return (
    <div className="space-y-4">
      <div>
        <Label htmlFor="name">Service Name</Label>
        <Input id="name" value={currentService.name} onChange={(e) => setCurrentService({...currentService, name: e.target.value})} />
      </div>
      <div>
        <Label htmlFor="category">Category</Label>
        <Select value={currentService.category} onValueChange={(value) => setCurrentService({...currentService, category: value})}>
          <SelectTrigger><SelectValue /></SelectTrigger>
          <SelectContent>
            <SelectItem value="publishing">Publishing</SelectItem>
            <SelectItem value="creative">Creative</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div>
        <Label htmlFor="description">Description</Label>
        <Textarea id="description" value={currentService.description} onChange={(e) => setCurrentService({...currentService, description: e.target.value})} />
      </div>
       <div>
        <Label htmlFor="icon">Icon</Label>
        <Select value={currentService.icon} onValueChange={(value) => setCurrentService({...currentService, icon: value})}>
          <SelectTrigger><SelectValue /></SelectTrigger>
          <SelectContent>
            {Object.keys(iconMap).map(iconName => (
              <SelectItem key={iconName} value={iconName}>{iconName}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div>
        <Label>Features</Label>
        <div className="space-y-2">
          {currentService.features.map((feature, index) => (
            <div key={index} className="flex items-center space-x-2">
              <Input value={feature} onChange={(e) => handleFeatureChange(index, e.target.value)} />
              <Button variant="ghost" size="icon" onClick={() => removeFeature(index)}><Trash className="w-4 h-4" /></Button>
            </div>
          ))}
        </div>
        <Button variant="outline" size="sm" onClick={addFeature} className="mt-2">Add Feature</Button>
      </div>
      <DialogFooter>
        <DialogClose asChild>
          <Button variant="ghost">Cancel</Button>
        </DialogClose>
        <Button onClick={handleSave}>{service ? "Save Changes" : "Create Service"}</Button>
      </DialogFooter>
    </div>
  );
};

export default function ServiceManager() {
  const [services, setServices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingService, setEditingService] = useState(null);

  useEffect(() => {
    loadServices();
  }, []);

  const loadServices = async () => {
    setLoading(true);
    try {
      const data = await Service.list('-created_date');
      setServices(data);
    } catch (error) {
      console.error("Failed to load services:", error);
    }
    setLoading(false);
  };

  const handleSaveService = async (serviceData) => {
    try {
      if (serviceData.id) {
        await Service.update(serviceData.id, serviceData);
      } else {
        await Service.create(serviceData);
      }
      loadServices();
    } catch (error) {
      console.error("Failed to save service:", error);
    }
  };

  const handleDeleteService = async (serviceId) => {
    if (window.confirm("Are you sure you want to delete this service?")) {
      try {
        await Service.delete(serviceId);
        loadServices();
      } catch (error) {
        console.error("Failed to delete service:", error);
      }
    }
  };

  const openForm = (service = null) => {
    setEditingService(service);
    setIsFormOpen(true);
  };

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>Manage Services</CardTitle>
        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
          <DialogTrigger asChild>
            <Button onClick={() => openForm()}>
              <Plus className="w-4 h-4 mr-2" />
              Add Service
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>{editingService ? "Edit Service" : "Add New Service"}</DialogTitle>
            </DialogHeader>
            <ServiceForm service={editingService} onSave={handleSaveService} onDone={() => setIsFormOpen(false)} />
          </DialogContent>
        </Dialog>
      </CardHeader>
      <CardContent>
        {loading ? (
          <div className="text-center p-8">Loading services...</div>
        ) : services.length > 0 ? (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {services.map((service) => {
              const IconComponent = iconMap[service.icon] || BookOpen;
              return (
                <Card key={service.id} className="flex flex-col">
                  <CardHeader>
                    <div className="flex items-center space-x-3">
                       <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                          service.category === 'publishing' ? 'bg-blue-50' : 'bg-purple-50'
                        }`}>
                          <IconComponent className={`w-5 h-5 ${
                            service.category === 'publishing' ? 'text-blue-600' : 'text-purple-600'
                          }`} />
                        </div>
                      <div>
                        <CardTitle className="text-lg">{service.name}</CardTitle>
                        <p className="text-sm text-gray-500 capitalize">{service.category}</p>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="flex-grow">
                    <p className="text-sm text-gray-600">{service.description}</p>
                  </CardContent>
                  <CardFooter className="flex justify-end space-x-2">
                    <Button variant="ghost" size="icon" onClick={() => handleDeleteService(service.id)}>
                      <Trash className="w-4 h-4" />
                    </Button>
                    <Button variant="outline" size="icon" onClick={() => openForm(service)}>
                      <Edit className="w-4 h-4" />
                    </Button>
                  </CardFooter>
                </Card>
              );
            })}
          </div>
        ) : (
          <div className="text-center py-12 text-gray-500">
            No services created yet.
          </div>
        )}
      </CardContent>
    </Card>
  );
}
